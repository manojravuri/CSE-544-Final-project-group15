# -*- coding: utf-8 -*-
"""ProbStat_q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16FWq_HSqvi5D9vVZhVx3prX0wEYuys0W
"""



import pandas as pd
import numpy as np



def get_beta(train_x, train_y):
    train_x_transpose = np.transpose(train_x)
    x_x_t = np.matmul(train_x_transpose, train_x)
    beta = np.matmul(np.matmul(np.linalg.inv(x_x_t), train_x_transpose), train_y)
    return beta


def get_regression_data(x, p):
    n = x.size
    x_data = np.zeros((n - p, p))
    y_data = np.zeros(n - p)
    for i in range(p, n):
        y_data[i - p] = x[i]
        x_data[i - p, :] = np.reshape(x[i - p:i], (1, p))
    return x_data, y_data


def AR(x, p):
    x_three = x[70:91]
    x_four = x[91:100]
    n = x_four.size
    mape = 0
    mse = 0
    x_data, y_data = get_regression_data(x[70:100], p)
    # print(x_data.shape)
    # print(x_data)
    # print(y_data)
    for i in range(n - 1):
        beta = get_beta(x_data[0:21 + i - p, :], y_data[0:21 - p + i])
        # print("beta",beta)
        pred = beta * x_data[21 + i - p + 1, :]
        pred = np.sum(pred)
        # print("pred",pred)
        mape = mape + abs((x_four[i] - pred) / x_four[i])
        mse = mse + ((x_four[i] - pred) * (x_four[i] - pred))
    mape = 100 / n * (mape)
    mse = mse / n
    print("MAPE", mape)
    print("MSE", mse)
    return mape, mse





def get_predicted_value(x, alpha):
    n = x.size
    rev_alpha = 1 - alpha
    coeff = 1
    pred = 0
    for i in range(n):
        pred = pred + (x[n - i - 1] * (coeff))
        coeff = coeff * rev_alpha
    pred = pred * alpha
    return pred


def EWMA(x, alpha):
    x_three = x[70:91]
    x_four = x[91:100]
    n=x_four.size
    mse = 0
    mape = 0
    for i in range(n):
        pred = get_predicted_value(x[70:91 + i], alpha)
        mape = mape + abs((x_four[i] - pred) / x_four[i])
        mse = mse + ((x_four[i] - pred) * (x_four[i] - pred))
    mape = 100 / n * (mape)
    mse = mse / n
    print("MAPE", mape)
    print("MSE", mse)
    return mape, mse



def run_all_models(x):
    AR(x, 3)
    AR(x, 5)

    EWMA(x, 0.5)
    EWMA(x, 0.8)




def q1_a():
    dataframe = pd.read_csv('../15_updated.csv')
    ne_confirmed = dataframe['ne_confirmed_per_day'].to_numpy()
    nd_confirmed = dataframe['nd_confirmed_per_day'].to_numpy()
    ne_deaths = dataframe['ne_deaths_per_day'].to_numpy()
    nd_deaths = dataframe['nd_deaths_per_day'].to_numpy()


    print("NE Confirmed",ne_confirmed)
    run_all_models(ne_confirmed)
    print("ND Confirmed", nd_confirmed)
    run_all_models(nd_confirmed)
    print("NE Deaths", ne_deaths)
    run_all_models(ne_deaths)
    print("ND Deaths", nd_deaths)
    run_all_models(nd_deaths)


q1_a()