# -*- coding: utf-8 -*-
"""q1_d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d_qTsLoITAhXX_cdkxLFIcZStVJS2iI8
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/MyDrive/probstat

# Commented out IPython magic to ensure Python compatibility.
# %pwd

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gamma

def plot_gamma_distribution(posteriors):
  weeks=[]
  for i in range(5,9):
      weeks.append("week"+str(i))
  for posterior in posteriors:
    alpha=posterior[0]
    beta=posterior[1]
    x = np.linspace(gamma.ppf(0.01, alpha),gamma.ppf(0.99, alpha), 100)
    y1 = gamma.pdf(x, a=alpha)
    plt.plot(x, y1)
  plt.legend(weeks)
  plt.xlabel("x")
  plt.ylabel("pdf")
  plt.title("Posterior distributions")
  plt.show()

"""Plotting the gamma distributions of posterior"""

def get_new_params(prior_alpha,prior_beta,x):
  #we get the sum because of the sum of exponents of exponential
  posterior_alpha=prior_alpha+1+np.sum(x)
  # we get the sum because of the sum of exponents of lambda which is the size
  posterior_beta=prior_beta+x.size
  return posterior_alpha,posterior_beta

"""Getting the alpha and beta of the new posterior from the prior data and sample data."""

def get_posteriors_for_distribution(x):
  prior_alpha=0
  prior_beta=1/np.mean(x[0:28])
  posteriors=[]
  #we can write exponential distribution as a gamma distribution with alpha=0 and beta=1/lambda_MME
  for i in range(4):
    #we get the posterior distribution by adding the alpha and beta from 2 distributions
    posterior_alpha,posterior_beta=get_new_params(prior_alpha,prior_beta,x[28+(i*7):28+((i+1)*7)])
    posterior=[posterior_alpha,posterior_beta]
    posteriors.append(posterior)
    prior_alpha,prior_beta=posterior_alpha,posterior_beta
  return posteriors

def get_MAP(posteriors):
    MAPS=[]
    #differentiating the gamma w.r.t x gives (alpha-1)/beta
    for posterior in posteriors:
        alpha = posterior[0]
        beta = posterior[1]
        map=(alpha-1)/beta
        MAPS.append(map)
    return MAPS

"""Calculate the MAPs for the posterior distribution which is a gamma distribution.
MAP=(alpha-1)/beta
"""

def q1_d():
    #get data from new file
    dataframe = pd.read_csv('../15_updated.csv')
    #get daily stats and conver to numpy
    ne_deaths = dataframe['ne_deaths_per_day'].to_numpy()
    nd_deaths = dataframe['nd_deaths_per_day'].to_numpy()

    #add the total deaths from both states
    total_deaths = ne_deaths[131:187] + nd_deaths[131:187]

    #get posterior gamma distributions for week 5,6,7,8
    posteriors = get_posteriors_for_distribution(total_deaths)
    print("posteriors", posteriors)
    #get the MAPs by finding the MLE of the gamma posterior
    maps=get_MAP(posteriors)
    print("MAPS", maps)
    #plot the posterior gamma distributions
    plot_gamma_distribution(posteriors)

"""**Approach**

* The exponential prior can also be written as a gamma distribution with alpha=0 and beta=mean of exponential dist=1/lambda_MME
*   The exponential prior and MLE of the poission gives a gamma distribution with alpha and beta with alpha-1 being the coefficient of lambda and beta being the coefficient of the exponent.
*   Taking the posterior of the previous week as the prior of the current week we get the a new gamma distribution in each


"""

q1_d()